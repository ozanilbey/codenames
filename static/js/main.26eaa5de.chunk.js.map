{"version":3,"sources":["components/records/Records.js","components/panel/Panel.js","components/card/Card.js","components/board/Board.js","data/languages/en/configuration.js","data/definitions/characters.js","App.js","utilities/format.js","index.js"],"names":["Records","props","className","categories","map","category","listIndex","key","data","filter","record","player","id","length","label","index","isSuccessful","word","Panel","status","style","color","text","instructions","table","backgroundColor","records","start","onClick","language","startGameText","switch","endTurnText","restart","newGameText","Card","isFlipped","backgroundImage","Board","disabled","deck","item","evaluate","code","players","displayName","gameReadyText","gameOverText","priorInstructionsText","statusText","state","suffix","slice","count","isPlayer","isEndingGame","initialState","started","ended","App","configuration","initiateGame","bind","generateGame","startGame","evaluateMove","getOtherPlayer","switchPlayer","addRecord","setStatus","endGame","this","setState","Object","keys","characters","character","sort","a","b","Math","random","forEach","push","words","splice","floor","otherPlayer","includes","indexOf","winner","string","charAt","toUpperCase","lang","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26eaa5de.chunk.js","sourcesContent":["// Modules\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Styles\nimport './Records.css'\n\n// Component: Records\nconst Records = props => (\n  <div className=\"records\">\n    {props.categories.map((category, listIndex) =>\n      <ul\n        key={listIndex}\n        className=\"list\">\n        {props.data.filter(record => record.player === category.id).length > 0 &&\n          <li className=\"label item\">{category.label}</li>\n        }\n        {props.data\n          .filter(record => record.player === category.id)\n          .map((record, index) =>\n            <li\n              key={index}\n              className=\"item\">\n              <b className=\"result\">{record.isSuccessful ? '✓' : '✗'}</b>\n              <span>{record.word}</span>\n            </li>\n          )\n        }\n      </ul>\n    )}\n  </div>\n)\n\n// Type checks\nRecords.propTypes = {\n  categories: PropTypes.array,\n  data: PropTypes.array\n}\n\n// Export\nexport default Records\n","// Modules\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Components\nimport Records from '../records/Records.js'\n\n// Styles\nimport './Panel.css'\n\n// Component: Panel\nconst Panel = props => (\n  <aside className=\"panel\">\n    <b className=\"name\">Codenames</b>\n    {props.status &&\n      <div\n        className=\"status\"\n        style={{ color: props.status.color || 'black' }}>\n        {props.status.text || ''}\n      </div>\n    }\n    {props.instructions &&\n      <div className=\"instructions\">\n        {props.instructions.text &&\n          <p className=\"text\">{props.instructions.text}</p>\n        }\n        {props.instructions.table &&\n          <div className=\"table\">\n            {props.instructions.table.map((color, index) =>\n              <div\n                key={index}\n                className=\"item\"\n                style={{ backgroundColor: color }}>\n              </div>\n            )}\n          </div>\n        }\n      </div>\n    }\n    {props.records &&\n      <Records\n        categories={props.records.categories}\n        data={props.records.data} />\n    }\n    <div className=\"options\">\n      {props.start &&\n        <button\n          className=\"restart\"\n          onClick={props.start}>\n          {props.language.startGameText}\n        </button>\n      }\n      {props.switch &&\n        <button\n          className=\"switch\"\n          onClick={props.switch}>\n          {props.language.endTurnText}\n        </button>\n      }\n      {props.restart &&\n        <button\n          className=\"restart\"\n          onClick={props.restart}>\n          {props.language.newGameText}\n        </button>\n      }\n    </div>\n  </aside>\n)\n\n// Type checks\nPanel.propTypes = {\n  status: PropTypes.object,\n  language: PropTypes.object,\n  records: PropTypes.object,\n  instructions: PropTypes.object,\n  restart: PropTypes.func,\n  start: PropTypes.func,\n  switch: PropTypes.func\n}\n\n// Export\nexport default Panel\n","// Modules\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\n// Component: Card\nconst Card = props => (\n  <div className=\"card\">\n    <div\n      className={\n        (props.isFlipped ? 'flipped ' : '') +\n        \"container\"\n      }\n      onClick={props.onClick}>\n      <div className=\"front\">{props.word}</div>\n      <div\n        className=\"back\"\n        style={{\n          backgroundImage: `url(\"images/characters/${props.id}.png\")`\n        }}>\n      </div>\n    </div>\n  </div>\n)\n\n// Type checks\nCard.propTypes = {\n  id: PropTypes.string,\n  word: PropTypes.string,\n  isFlipped: PropTypes.bool,\n  onClick: PropTypes.func\n}\n\n// Export\nexport default Card\n","// Modules\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Components\nimport Card from '../card/Card.js'\n\n// Styles\nimport './Board.css'\n\n// Component: Board\nconst Board = props => (\n  <main\n    className={\n      (props.disabled ? 'disabled ' : '') +\n      'board'\n    }>\n    {props.deck && props.deck.length > 0 &&\n      <div className=\"collection\">\n        {props.deck.map((item, index) =>\n          <Card\n            key={index}\n            {...item}\n            onClick={() => !item.isFlipped &&\n              props.evaluate(index)\n            } />\n        )}\n      </div>\n    }\n  </main>\n)\n\n// Type checks\nBoard.propTypes = {\n  deck: PropTypes.array,\n  disabled: PropTypes.bool,\n  evaluate: PropTypes.func\n}\n\n// Export\nexport default Board\n","export default {\n  code: 'en',\n  players: {\n    'blue-agent': { displayName: 'blue agents' },\n    'red-agent': { displayName: 'red agents' }\n  },\n  newGameText: 'new game',\n  startGameText: 'start game',\n  endTurnText: 'end turn',\n  gameReadyText: 'Starting game...',\n  gameOverText: 'Game over!',\n  priorInstructionsText: 'Take a photo of this table or memorize it since this is the first and the last time you see it.',\n  statusText: (state, player) => {\n    if(state === 'won') {\n      return `${player} wins!`\n    } else if(state === 'switched') {\n      const suffix = player.slice(-1) === 's' ? '' : 's'\n      return `${player}'${suffix} turn`\n    } else {\n      return ''\n    }\n  }\n}\n","export default {\n  'blue-agent': {\n    color: 'blue',\n    count: 8,\n    isPlayer: true\n  },\n  'red-agent': {\n    color: 'red',\n    count: 8,\n    isPlayer: true\n  },\n  'civilian': {\n    color: 'tan',\n    count: 7\n  },\n  'assassin': {\n    color: 'black',\n    count: 1,\n    isEndingGame: true\n  }\n}\n","// Modules\nimport React, { Component } from 'react'\n\n// Components\nimport Panel from './components/panel/Panel.js'\nimport Board from './components/board/Board.js'\n\n// Utilities\nimport { upperCaseFirst } from './utilities/format.js'\n\n// Data\nimport words from './data/languages/en/words.json'\nimport language from './data/languages/en/configuration.js'\nimport characters from './data/definitions/characters.js'\n\n// State\nconst initialState = {\n  started: false,\n  ended: false,\n  status: null,\n  player: null,\n  records: [],\n  deck: []\n}\n\n// Application\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = initialState\n    this.configuration = {\n      players: []\n    }\n    this.initiateGame = this.initiateGame.bind(this)\n    this.generateGame = this.generateGame.bind(this)\n    this.startGame = this.startGame.bind(this)\n    this.evaluateMove = this.evaluateMove.bind(this)\n    this.getOtherPlayer = this.getOtherPlayer.bind(this)\n    this.switchPlayer = this.switchPlayer.bind(this)\n    this.addRecord = this.addRecord.bind(this)\n    this.setStatus = this.setStatus.bind(this)\n    this.endGame = this.endGame.bind(this)\n  }\n  componentDidMount () {\n    this.initiateGame()\n  }\n  initiateGame () {\n    this.setState(initialState)\n    this.generateGame()\n  }\n  generateGame () {\n    // Get players\n    this.configuration.players = Object.keys(characters).filter(character =>\n      characters[character].isPlayer\n    )\n    let { players } = this.configuration\n    // Shuffle players\n    players.sort((a,b) => Math.random() - .5)\n    // Create deck\n    let deck = []\n    Object.keys(characters).forEach(character => {\n      let { count, color, isEndingGame = false } = characters[character]\n      character === players[0] && count++\n      for (let index = 0; index < count; index++) {\n        deck.push({\n          color,\n          character,\n          isEndingGame,\n          id: `${character}/${index + 1}`,\n          word: words.splice(Math.floor(Math.random() * words.length), 1)[0],\n          isFlipped: false\n        })\n      }\n    })\n    // Shuffle deck\n    deck.sort((a, b) => Math.random() - 0.5)\n    // Set final data\n    this.setState({\n      deck,\n      player: players[0]\n    })\n    // Set status\n    this.setStatus(language.gameReadyText)\n  }\n  startGame () {\n    let { player } = this.state\n    this.setState({\n      started: true\n    })\n    // Set status\n    this.setStatus(\n      language.statusText(\n        'switched',\n        language.players[player].displayName\n      ),\n      characters[player].color\n    )\n  }\n  evaluateMove (index) {\n    const { deck, player } = this.state\n    const { players } = this.configuration\n    // Get other player\n    const otherPlayer = this.getOtherPlayer(player)\n    // Flip item\n    deck[index] = {\n      ...deck[index],\n      isFlipped: true\n    }\n    this.setState({ deck })\n    // Add record\n    this.addRecord(deck[index].word, player, player === deck[index].character)\n    // Evaluate\n    if (deck[index].isEndingGame) {\n      this.endGame(otherPlayer)\n    } else if (\n      players.includes(deck[index].character) &&\n      deck.filter(item =>\n        item.character === deck[index].character && !item.isFlipped\n      ).length === 0\n    ) {\n      this.endGame(deck[index].character)\n    } else if (deck[index].character !== player) {\n      this.setStatus(\n        language.statusText(\n          'switched',\n          language.players[otherPlayer].displayName\n        ),\n        characters[otherPlayer].color\n      )\n      this.setState({\n        player: otherPlayer\n      })\n    }\n  }\n  getOtherPlayer (player) {\n    const { players } = this.configuration\n    return players[1 - players.indexOf(player)]\n  }\n  switchPlayer () {\n    const player = this.getOtherPlayer(this.state.player)\n    this.setState({ player })\n    this.setStatus(\n      language.statusText('switched', language.players[player].displayName),\n      characters[player].color\n    )\n  }\n  addRecord (word, player, isSuccessful) {\n    this.setState({\n      records: [\n        ...this.state.records,\n        { word, player, isSuccessful }\n      ]\n    })\n  }\n  setStatus (text, color = 'black') {\n    this.setState({\n      status: { text, color }\n    })\n  }\n  endGame (winner) {\n    this.setState({\n      ended: true\n    })\n    this.setStatus(\n      `${\n        language.gameOverText\n      } ${\n        upperCaseFirst(\n          language.statusText('won', language.players[winner].displayName)\n        )\n      }`,\n      characters[winner].color\n    )\n  }\n  render () {\n    let { started, ended, status, deck, records } = this.state\n    let { players } = this.configuration\n    return (\n      <div\n        className=\"app\"\n        lang={language.code}>\n        <Board\n          deck={deck}\n          disabled={!started || ended}\n          evaluate={this.evaluateMove} />\n        <Panel\n          status={status}\n          language={language}\n          restart={this.initiateGame}\n          {...(started\n            ? {\n            records: {\n              categories: players.map(player => ({\n                id: player,\n                label: `${language.players[player].displayName} (${\n                  deck.filter(item => item.character === player && !item.isFlipped).length\n                })`\n              })),\n              data: records\n            },\n            switch: this.switchPlayer\n          }\n          : {\n            instructions: {\n              text: language.priorInstructionsText,\n              table: deck.map(item => item.color)\n            },\n            start: this.startGame\n          }\n        )} />\n      </div>\n    )\n  }\n}\n\n// Export\nexport default App\n","export const upperCaseFirst = string =>\n  string.charAt(0).toUpperCase() + string.slice(1)\n","// Modules\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n// Components\nimport App from './App'\n\n// Styles\nimport './style.css'\n\n// Render\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}